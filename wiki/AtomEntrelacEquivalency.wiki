#summary how atoms (especially binary sequences) are handled by an arrows based system without denying the "everything is an arrow" paradigm

== entrelacs ==

According to the [ArrowParadigm Arrow paradigm], _everything is an arrow_. It means that information is expressed in the form of *arrows* linked to each others. There is nothing like "nodes".

However, arrows can be used to form signs. See:
  * http://en.wikipedia.org/wiki/Ouroboros
  * http://en.wikipedia.org/wiki/Taijitu
  * http://en.wikipedia.org/wiki/Triquetra
  * http://en.wikipedia.org/wiki/Celtic_knot

The idea is to define a set of interlaced arrows so to make it impossible to find smaller closed constructs inside. One calls such a construct an "entrelacs".

== entrelacs are atoms ==

An "entrelacs" is fully defined and can't be divided. It doesn't contain any smaller entrelacs. One may say an entrelacs is equivalent to an atom. 

And even more important: it's actually possible to distinguish entrelacs from each other.

For example, the arrow whose both ends links to itself is usually named "_Ouroboros_" (or _Eve_ in Entrelacs documentation). Two drawings of "_Ouroboros_" are two physical representations of the same entrelacs.

Consequently, even in a pure space of relations, entrelacs can be used as atoms so to define further _Domain Specific Languages_, like lambda-calculus.

== atoms / entrelacs correspondence ==

The set of entrelacs is a _*countable set*_. It implies that by defining an adequate bijection, one can easily prove that any binary sequence is equivalent to a corresponding "entrelacs". In conclusion, a binary sequence may be seen as the condensed form of a corresponding entrelacs.

== conclusion ==

A practical conclusion is that handling binary sequences in an arrows based system doesn't deny the overall paradigm. All in all, everything is *still* an arrow. But it also implies that raw data should be proceed like regular arrows, especially regarding uniqueness and immutability.