#summary Entrelacs relays on the "arrow" paradigm.

= Introduction =

Entrelacs System deals only with "arrows". Its credo could be "Everything is an arrow". This is the *"Arrow Paradigm"*.

==regular arrows==
An arrow is an unique immutable oriented pair of arrows.

  * "pair of arrows" means both ends of each arrow are two other arrows. *An arrow graph doesn't contain any node.*
  * "oriented" means the pair (A,B) is different from (B,A).
  * "unique" means each identifiable arrow is stored only once in the whole storage space.
  * "immutable" means an arrow can't be modified once stored.
|| http://entrelacs.googlecode.com/svn/trunk/doc/pictures/arrows1.png   ||Here is some arrows. As you can see, arrows ends are other arrows.||


==_entrelacs_==
Each arrow definition embeds (leads to) a set of ancestor arrows forming a closed and connected interlaced pattern as a whole. Such a pattern is called an "entrelacs".

<!>connected means there is at least one arrow which embeds the whole pattern in its definition. See counter-example.

|| http://entrelacs.googlecode.com/svn/trunk/doc/pictures/entrelacs1.png   ||Here is a introduction of few entrelacs (and one counter-example)||

== prim entrelacs==

Some of these entrelacs are so reentrant they can't be divided into smaller ones. They are "prim entrelacs". They may be seen as atomistic pieces of data.

|| http://entrelacs.googlecode.com/svn/trunk/doc/pictures/eve.png   || this arrow is also a "prim entrelacs". It is named _eve_ (certainly because it has no parent) ||
||http://entrelacs.googlecode.com/svn/trunk/doc/pictures/composed1.png|| this arrow is not a "prim entrelacs" but it embeds two ones ||

Note that an arrow is equivalent in every aspect to the entrelacs formed by all its ancestors. We may substitute indifferently one to the other.

==atomistic arrows==
Entrelacs allows to store "unique" and "immutable" flat data as BLOB or TAG (C-String) scalars in addition to regular arrows.

Entrelacs underlying theory demonstrates such atomistic data are equivalent to prim entrelacs. In other mean, they are arrows as well. See AtomEntrelacEquivalency for further reading.

===vocabulary===
|| http://entrelacs.googlecode.com/svn/trunk/doc/pictures/arrow1.png || an _arrow_, its _head_, its _tail_, its _incoming children_ arrows, its _outgoing children_ ||
  * the first arrow in the pair (resp. the second) is named the "tail" (resp. the "head").
  * an arrow "goes out" its tail arrow and "comes into" its head arrow.
  * from its tail (resp. its head) point of view, an arrow is an outgoing (resp. incoming) arrow.
  * An arrow may have many incoming/outgoing arrows, sometimes called "children" arrows.
  * Arrows reached by recursively following head/tail definitions are ancestors. As a whole, these ancestors form a valid _entrelacs_.

===Rooted arrows===
All the system knowledge state might be represented as a single  interlaced pattern embedded in a unique arrow definition. 

However, it's more convenient to represent the system top-level context as a set of "rooted" arrows. Rooted arrows are regular arrows among the storage space simply flagged by a "root" mark.

|| http://entrelacs.googlecode.com/svn/trunk/doc/pictures/rooted1.png   || this arrow is "rooted". See the graphic notation here. It corresponds to a dedicated flag bit on storage||