#summary The Entrelacs Abstract Machine

= Introduction =

The Entrelacs Abstract Machine evals programs made up of arrows.

Its language is as well:
  * a functional language
  * a stack based language
  * a Call By Continuation style language
  * a query language Ã  la SQL
  * a fully reflexive language

= Machine State =
The Entrelacs Machine is largely inspired by the 
CaEK abstract machine of Flanagan et al. [1993]. This machine handles:
 * expressions: lambda-expressions formulated as arrows structures.
 * environments: sets of links between symbols (free variables) and values.
 * closures: Functional values are converted into closures. A closure is a pair (expression, environment).


A Machine State is defined by a single arrow _M_ which is made up of:
 * an _expression_,
 * an _environment_,
 * a _continuation chain_.

All these components consist in arrows. A Machine State itself consists in a single arrow _M_.

{{{
 M = (expression (environment continuation)) TBC
}}}


= Real reflexivity =

Within a working Entrelacs systems, programs are directly stored as arrow structures (serialized text representation is only supported for communication purpose).

All in all, there is no difference between a piece of source code, a Concrete Syntax Tree (CST) and even an Abstract Syntax Tree (AST) in Entrelacs! Moreover, the current machine state (M) can be fully acceded and modified by programs. Programs can browse (introspection) and modify (intercession) such arrows in order to modify themselves for real!  Programs can not only modify themselves but also store their changes.

= The language =

See EntrelacsLanguage.