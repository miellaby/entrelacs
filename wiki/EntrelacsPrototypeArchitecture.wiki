#summary Entrelacs Prototype architecture.

Entrelacs might eventually become a real Operating System. But for the moment, the Entrelacs prototype stands as yet an other virtual machine on top of the existing software stack -typically a GNU/Linux system.

Entrelacs prototype includes several nested components:
  * The Entrelacs' prim engine also known as the EntrelacsAbstractMachine
  * The Entrelacs' ArrowsSpace. 

The architecture also defines 3 types of external agent:
  * "arrow publisher"
  * "arrow subscriber"
  * "arrow operator"

There are two public interfaces as well.
  * C API : EntrelacsLibrary.
  * network API, derived from HTTP : EntrelacsServer.

==Arrows publishers, subscribers, operators==

Arrow publishers, subscribers, and evaluators are external agents out of the system boundaries.

  * Arrow publishers convert system inputs (user actions, hardware events, or network inputs like incoming http requests, ...) into arrows submitted to the prim evaluation machine. Arrows are built into the "arrows space" on the fly. Each atomic input is separately committed.
  * Arrow Subscribers convert back system outgoing arrows into a more useful output or behavior: network messages, graphical/textual feedback to the user, hardware commands. A subscriber only receives the subset of output arrows they've subscribed for. The subscription process is based upon arrow pattern matching.
  * Arrow operators can be plugged into the prim engine evaluation process. When an operator callback is called, They can access and modify the current machine state. Operators typically compute and return a result (e.g. from "2 + 2" to "4").


One can build up a "proxy agent" by combining arrows Publishers and subscribers. Such an agent may represent an external agent to the system. Please remind external agents may be human (logged users) or digital (external software clients). One can say as well a complete communication channel (e.g. an user terminal) corresponds both to an arrows publisher and subscriber.

As a whole, the arrow subscribing/publishing logic is similar to a publish/subscribe messaging bus.

Arrows publishers, subscribers and evaluators are *not* powered by Entrelacs but the Linux host system. This implies agents are not subject to system reflexivity. Even if some theoreticians might disagree, I'd like to notice human brain can not deeply change other human organs neither.

The Entrelacs overall process is the following:
  * an external event occures
  * One publisher assimilates these data and submits an input arrow.
  * The prim engine processes the input arrow (one may say it applies the behavior function to it). The input arrow evaluation may induce:
     * persistent changes in the system knowledge,
     * side effects due to "arrow operators",
     * output arrows.
  * Each output arrow is converted back into system output or behavior by one or several arrow subscribers.

To be done: Memoization and cache explanation.