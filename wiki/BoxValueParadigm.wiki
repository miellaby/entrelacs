#summary Box/Value paradigm

Computer sciences deal with [http://en.wikipedia.org/wiki/Data_structure data structure (w)].  Different kinds of data structures are suited to different kinds of applications.

But how does one map such structures onto a physical support, like
 * a sheet of paper,
 * an hard drive,
 * a memory bank ?

For example, let's says we've got some statistics organized into a [http://en.wikipedia.org/wiki/Tree_(data_structure) tree (w)]. How can we get this tree stored on an hard drive?

To do so, engineers are used to applying the box/value paradigm. They divide space into boxes, each box containing a value.
 * Sometimes, a value is a sign. That is a binary representation of a natural number or any other concept mapped into a natural number.
 * Sometimes, a value is a gathering of smaller values. In other words, its box is itself divided into smaller boxes by repeating the box/value paradigm.
 * Sometimes, a value is actually (involved in) referencing an other box.

In our example, the box/value paradigm leads us to put our data into boxes (one box per node) and to map the tree structure as a set of boxes which reference each others.

Why programmers/engineers never explore alternative design pattern? One may presume it's due how _writing_ works. _Writing_ is also based upon the box/value paradigm. Writing is indeed all about boxes (sentences, words...) until signs (letters or ideograms). Signs form references up to concepts. Boxes may also contain references to other boxes, like "the last chapter" in "please refer to the last chapter" sentence.

The box/value paradigm is so deeply rooted in our minds that no alternative has even been studied. And yet, this approach leads to issues.

 * *Redundancy*. The box/value paradigm leads to mapping a given concept several times. For example, if our data tree contains several references to the natural number 2, this number representation will be repeated as identical values in several boxes. It looks like a necessity like with Writing, but it's not.

* Issue 2: Compartmenting. The box/value paradigm lead to an heterogeneous set of information boxes. The operating system usually publish the structure of the boxes it is responsible for, typically a file system. But the content of the boxes themselves depends on the application which handle them. Neither an human user nor a software agent can browse the inner content of these files to create new information.

* Issue 3: No meta. Inside a box, one value may actually be a reference to an other box (though there is usually no way to know it) but it can't be a reference to _a given value in a given box_ concept because such a piece of information is not stored as is. This is eventually a very serious issue because a box/value based software stack can't process its own information at an higher level of abstraction, i.e. at a meta level.