#summary Some unique properties of the Entrelacs System.

= Introduction =

The ArrowParadigm is a very new manner of storing information within a computing system.

This approach encompasses commonly used solutions like semantic planar graphs, relational data bases or object oriented models. It brings properties to Entrelacs which distinguish it from those more classical systems.

= Entrelacs unique properties =

  * _homoiconicity_ : By getting rid of the "value in a box" way of thinking, the Entrelacs System removes these artificial and useless dualities which handicap the whole data computing engineering from the beginning: "edge vs. node", "program vs. data", "entity vs. relation", "fact vs. rule", "variable vs. value", "user vs. programmer", "function vs. object", and so on. 

  * _pure relationism_ : Relations are first order and are actually only citizens within the system. Even atomistic data is seen as particular closed structures of relations from which one may constructively build higher order relations.

  * _scale or abstraction invariance_ : Within Entrelacs, and whatever its complexity or abstraction level, a piece of information always consists in a structure of arrows with consistent properties and operators. A character string, a full featured office suite, a meta-model definition, some piece of "hello world" code: *all of them are arrows*.

  * _ultimate expressiveness_ : At any time, any piece information can be used in an upper context as either a thing to be "tagged"/"refered" or a "tag"/"reference". Resulting tagged-to-tag relations can be abstracted in turn. There is no limit to how subtle and deep statments can be made.

  * _reflexivity_ : Thoses unique Entrelacs' properties give to hosted agents the ability to elaborate about knowledge (and behavior) like a human being usually does, that is by conducing _introspection_ and _intercession_ activity. Programs are both accessible and modifiable at the highest level (source code) and in a persistent way.

  * _redundancy free storage_ : The Entrelacs system checks to make sure that there is never more than one copy of each definable arrow in the whole system storage space. Each stored arrow is like mapped to its corresponding pure mathematical object.

  * _auto-indexation_ : The system can retrieve an arrow's connectivity -whose arrows are linked to a given arrow- quite efficiently. As the system is redundancy free, it implies each piece of information forms an index to all its related information within the system.

  * _orthogonal and incremental fined-grained persistence_ : The system handles structured knowledge at the finest granularity possible. This property makes _incremental and orthogonal persistence_ a natural system feature. It means nor the application developer nor the user have to take care of data saving into files and disks. The whole machine state is preserved from power outage in a transparent (no human guidance), continuous and seamless way.

  * _persistent data structures_ : Structures of arrows are naturally _persistent data structures_. The system never writes over existing information as long as it hasn't been forgotten. Whatever the job to be done, the system can be asked to elaborate on past data and roll back to its previous state.

  * _seamless garbage collection_ : The system automatically retrieves resources used by dismissed knowledge. No human guidance is required because arrows made this process very easy.

  * _memoization_ : Arrows make the system able to easily memorize and get back intermediate or final computation results. It forms the basis of a generalized _memoization_. Think of it as an universal cache of all computed results so the system would never repeat the same work twice.

  * _virtualize/abstract anything_ : Whatever the system, every time a piece of code or a statement is evalued, this evaluation takes place on top of a stack of abstract machines starting from a root level native runtime environment. But only arrows make it easy to handle and change this chain of machines and get new behaviour from existing code. Entrelacs allows new forms of code reuse.

  * _upward security_ : Arrows make the system able to easily put any untrusted agent into an hosted fake system without the agent knowing whether it runs in the top-level system or not.

= Some related concepts and technologies =

   * The ArrowParadigm
   * http://en.wikipedia.org/wiki/Reflection_(computer_science)
   * http://en.wikipedia.org/wiki/Homoiconicity
   * http://en.wikipedia.org/wiki/Orthogonal_persistence
   * http://en.wikipedia.org/wiki/Purely_functional
   * http://en.wikipedia.org/wiki/Persistent_data_structure
   * http://en.wikipedia.org/wiki/Scale_invariance
   * http://en.wikipedia.org/wiki/Memoization

= Some opposed or superseded concepts =

   * First of all, please note *[http://en.wikipedia.org/wiki/Glossary_of_graph_theory arrow structures are NOT graphs]*.
   * http://en.wikipedia.org/wiki/File_system
   * http://en.wikipedia.org/wiki/Object_database
   * http://en.wikipedia.org/wiki/Navigational_Database
   * http://en.wikipedia.org/wiki/Relational_database
   * http://en.wikipedia.org/wiki/Relational_model
   * http://en.wikipedia.org/wiki/Operating_system
   * http://en.wikipedia.org/wiki/Operating_system
   * http://en.wikipedia.org/wiki/NoSQL
   * http://en.wikipedia.org/wiki/Tag_(metadata)
   * http://en.wikipedia.org/wiki/Semantic_Web
   * http://en.wikipedia.org/wiki/Resource_Description_Framework