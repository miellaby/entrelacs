#summary Scratch Page. Work in progress.

= Introduction =
This a *scratch page* to store work in progress note and ideas.

= Future usage =
== prototype as a web server usage ideas ==
   * powering a mind-mapping web application based on arrows rather than old-school graphs.
   * sharing files and actually anything else between its web users.
   * powering various AJAX&COMET application.
== arrows made structures ideas ==
   * mute arrows in fundamental modeled neurons. Each neuron-arrow might be enriched with a learning coefficient evolving according to Hebb's rule.
   * TO DO: porting _Hebb's rule_ to arrows graph.

= Entrelacs vs. X theory =

=== vs. Shanon ===
   * Entrelacs doesn't pretend to encode data further than any limit proved by http://en.wikipedia.org/wiki/Information_theory
   * However, by adapting Huffman coding to transform a sequence of atoms into a structure of unique pairs, it should be possible to optimize the way to pair things (that is in a way which makes the resulting graph more compact)

=== vs. Turing ===
   * Entrelacs doesn't pretend to do things which couldn't be accomplished by any other computing languages and run-time environments as we already know everything is eventually equivalent to a Turing Machine, not less nor more.
   * However, two Turing equivalent systems can be very different in terms of usability and utility. You might write a Word Processor with the famous Conway "Game Of Life" Automata, but it's much more efficient to use a modern computing language which surpasses its concurrents in expressiveness like OCAML does.
   * Entrelacs system surpasses classical system in information handling. When data are stored in Entrelacs, they are much more useful than when they are stored in a classical file read by a classical application over a classical operating system. That's all the reason why this project exists.

= ideas=
==Not yet dead ideas ==
   * move INGOIN/OUTGOING cells to stuff holes due to cells deletion.

== definitely dead ideas ==

This ยง gathers dismissed quite stupid ideas

   * ~use the arrow reference counter to reduce the search range of IN/OUT arrows. The reference counters may be duplicated (one for IN, one for OUT) on this purpose.
   * combine a "lastOne" bit with cell contents to limit a little more open addressing search. This bit must be updated when adding or removing elements in a block.

= I daren't =
   * I daren't thinking this "information brought by an entrelacs machine" idea is the most important invention since writing.